// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// Mockredis is a mock of redis interface.
type Mockredis struct {
	ctrl     *gomock.Controller
	recorder *MockredisMockRecorder
}

// MockredisMockRecorder is the mock recorder for Mockredis.
type MockredisMockRecorder struct {
	mock *Mockredis
}

// NewMockredis creates a new mock instance.
func NewMockredis(ctrl *gomock.Controller) *Mockredis {
	mock := &Mockredis{ctrl: ctrl}
	mock.recorder = &MockredisMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockredis) EXPECT() *MockredisMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *Mockredis) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockredisMockRecorder) Delete(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*Mockredis)(nil).Delete), ctx, key)
}

// Get mocks base method.
func (m *Mockredis) Get(ctx context.Context, token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockredisMockRecorder) Get(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Mockredis)(nil).Get), ctx, token)
}

// Set mocks base method.
func (m *Mockredis) Set(ctx context.Context, key, value string, expiration time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockredisMockRecorder) Set(ctx, key, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*Mockredis)(nil).Set), ctx, key, value, expiration)
}

// MockuserService is a mock of userService interface.
type MockuserService struct {
	ctrl     *gomock.Controller
	recorder *MockuserServiceMockRecorder
}

// MockuserServiceMockRecorder is the mock recorder for MockuserService.
type MockuserServiceMockRecorder struct {
	mock *MockuserService
}

// NewMockuserService creates a new mock instance.
func NewMockuserService(ctrl *gomock.Controller) *MockuserService {
	mock := &MockuserService{ctrl: ctrl}
	mock.recorder = &MockuserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserService) EXPECT() *MockuserServiceMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockuserService) Authenticate(ctx context.Context, username, password string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", ctx, username, password)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockuserServiceMockRecorder) Authenticate(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockuserService)(nil).Authenticate), ctx, username, password)
}

// MockauthTool is a mock of authTool interface.
type MockauthTool struct {
	ctrl     *gomock.Controller
	recorder *MockauthToolMockRecorder
}

// MockauthToolMockRecorder is the mock recorder for MockauthTool.
type MockauthToolMockRecorder struct {
	mock *MockauthTool
}

// NewMockauthTool creates a new mock instance.
func NewMockauthTool(ctrl *gomock.Controller) *MockauthTool {
	mock := &MockauthTool{ctrl: ctrl}
	mock.recorder = &MockauthToolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockauthTool) EXPECT() *MockauthToolMockRecorder {
	return m.recorder
}

// CreateToken mocks base method.
func (m *MockauthTool) CreateToken(name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockauthToolMockRecorder) CreateToken(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockauthTool)(nil).CreateToken), name)
}

// VerifyToken mocks base method.
func (m *MockauthTool) VerifyToken(token string) (bool, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", token)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockauthToolMockRecorder) VerifyToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockauthTool)(nil).VerifyToken), token)
}
